<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Zijian (Jamey) Zhang</title>
    <link>https://jameyimpact.github.io/post/</link>
      <atom:link href="https://jameyimpact.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sun, 23 Aug 2020 11:53:53 -0700</lastBuildDate>
    <image>
      <url>https://jameyimpact.github.io/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Posts</title>
      <link>https://jameyimpact.github.io/post/</link>
    </image>
    
    <item>
      <title>An OCR System for Customer Clearance</title>
      <link>https://jameyimpact.github.io/post/unix/</link>
      <pubDate>Sun, 23 Aug 2020 11:53:53 -0700</pubDate>
      <guid>https://jameyimpact.github.io/post/unix/</guid>
      <description>&lt;p&gt;Optical character recognition (OCR) is a way of extracting plain text from images containing text. Customs clearance is a document given by customs to a shipper to show that customs duty has been paid and the goods can be shipped. Most of these documents are image based. It means texts in the documents cannot be copied and pasted. I have built a Tesseract based OCR system which can preprocess, segment and recognize the image-based PDF files. These recognized texts can be stored in a database for future usage.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;For preprocessing component, image-based PDF files can be rotated, split, converted to images, deskewed and combined. After preprocessing, the image-based PDF can be ready to be recognized with a clear format. 
&lt;img src=&#34;pdf2img.gif&#34; alt=&#34;Mobile app&#34; title=&#34;Convert PDFs to images&#34;&gt;















&lt;figure id=&#34;figure-convert-pdfs-to-images&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;&#34; data-caption=&#34;Convert PDFs to images&#34;&gt;


  &lt;img src=&#34;&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Convert PDFs to images
  &lt;/figcaption&gt;


&lt;/figure&gt;
 
&lt;img src=&#34;clearimg.gif&#34; alt=&#34;Mobile app&#34; title=&#34;Clear Images&#34;&gt;















&lt;figure id=&#34;figure-clear-images&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;&#34; data-caption=&#34;Clear images&#34;&gt;


  &lt;img src=&#34;&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Clear images
  &lt;/figcaption&gt;


&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For segmentation component, I use zonal OCR to segment image-based PDF files based on the areas selected by users and output zonal templates. Zonal OCR can help users process the same layout files and extract keywords and attributes efficiently. Full OCR can use tesseract to automatically segment the whole page of the PDF file. However, users cannot control this segmentation process.
&lt;img src=&#34;zonalOCR_segmentation.gif&#34; alt=&#34;Mobile app&#34; title=&#34;zonalOCR_segmentation&#34;&gt;















&lt;figure id=&#34;figure-zonal-ocr-segmentation&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;&#34; data-caption=&#34;Zonal OCR segmentation&#34;&gt;


  &lt;img src=&#34;&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Zonal OCR segmentation
  &lt;/figcaption&gt;


&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For recognition component, zonal OCR can recognize image-based PDF files based on the zonal templates. Users can easily modify the recognize results in the web page and export the modified results to excel files; full OCR can recognize all the content in image-based PDF files. Users can extract wanted keywords and attributes based predefined templates which is created by regular expression and export the extracted information to json files. 
&lt;img src=&#34;zonalOCR_recognition.gif&#34; alt=&#34;Mobile app&#34; title=&#34;zonalOCR_recognition&#34;&gt;















&lt;figure id=&#34;figure-zonal-ocr-recognition&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;&#34; data-caption=&#34;Zonal OCR recognition&#34;&gt;


  &lt;img src=&#34;&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Zonal OCR recognition
  &lt;/figcaption&gt;


&lt;/figure&gt;
 
&lt;img src=&#34;fullOCR_recognition.gif&#34; alt=&#34;Mobile app&#34; title=&#34;fullOCR_recognition&#34;&gt;















&lt;figure id=&#34;figure-full-ocr-recognition&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;&#34; data-caption=&#34;Full OCR recognition&#34;&gt;


  &lt;img src=&#34;&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Full OCR recognition
  &lt;/figcaption&gt;


&lt;/figure&gt;
 
&lt;img src=&#34;fullOCR_extraction.gif&#34; alt=&#34;Mobile app&#34; title=&#34;fullOCR_extraction&#34;&gt;















&lt;figure id=&#34;figure-full-ocr-extraction&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;&#34; data-caption=&#34;Full OCR extraction&#34;&gt;


  &lt;img src=&#34;&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Full OCR extraction
  &lt;/figcaption&gt;


&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>eBay Product Search</title>
      <link>https://jameyimpact.github.io/post/ebay/</link>
      <pubDate>Fri, 21 Aug 2020 21:05:54 -0700</pubDate>
      <guid>https://jameyimpact.github.io/post/ebay/</guid>
      <description>&lt;p&gt;I individually developed a web app that allows users to search items for sale on eBay.com using their API. By typing in keywords and setting filters, users can view the items list that meet their requirements, as well as the detailed information of each product.&lt;/p&gt;
&lt;p&gt;The first implementation is a non-responsive design. Technically, I&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write Python scripts using Flask which
&lt;ul&gt;
&lt;li&gt;listens to AJAX calls from the front end web page,&lt;/li&gt;
&lt;li&gt;calls ebay developers APIs to get raw JSON response using a URL REST request,&lt;/li&gt;
&lt;li&gt;responds frontend webpage with processed JSON text.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Design frontend webpage using HTML, CSS, JavaScript, HTML DOM and XMLHTTPRequest object.&lt;/li&gt;
&lt;li&gt;Deploy the app on Google Cloud Platform App Engine.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;ebay6.gif&#34; alt=&#34;Non-responsive design&#34;&gt;

&lt;a href=&#34;https://searchebay-jamey.wl.r.appspot.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Non-responsive design link&lt;/a&gt;&lt;/p&gt;
&lt;!-- 




  
  











&lt;figure id=&#34;figure-non-responsive-design&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://jameyimpact.github.io/post/ebay/ebay6_hu56a3530c5b3d6967e34568d1ffb8b97a_19005042_2000x2000_fit_lanczos.gif&#34; data-caption=&#34;Non-responsive design&#34;&gt;


  &lt;img data-src=&#34;https://jameyimpact.github.io/post/ebay/ebay6_hu56a3530c5b3d6967e34568d1ffb8b97a_19005042_2000x2000_fit_lanczos.gif&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1888&#34; height=&#34;972&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Non-responsive design
  &lt;/figcaption&gt;


&lt;/figure&gt;
 --&gt;
&lt;p&gt;The second implementation is a responsive design. Technically, I&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write NodeJS scripts which
&lt;ul&gt;
&lt;li&gt;listens to AJAX calls from the front end web page,&lt;/li&gt;
&lt;li&gt;calls ebay developers APIs to get raw JSON response using a URL REST request&lt;/li&gt;
&lt;li&gt;responds frontend webpage with processed JSON text.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Design frontend webpage using Angular8, implemented two way data binding, page routing and AJAX calls, set styling with Bootstrap to make it compatible with mobile devices.&lt;/li&gt;
&lt;li&gt;Deploy the app on Google Cloud Platform App Engine.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;ebay81.gif&#34; alt=&#34;Responsive design&#34;&gt;
&lt;img src=&#34;ebay82.gif&#34; alt=&#34;Responsive design&#34;&gt;

&lt;a href=&#34;https://angular-nodejs-app.wl.r.appspot.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Responsive design link&lt;/a&gt;&lt;/p&gt;
&lt;!-- 




  
  











&lt;figure id=&#34;figure-responsive-design&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://jameyimpact.github.io/post/ebay/ebay81_hue2187b0be88d65848ae9dab775f1b965_21198712_2000x2000_fit_lanczos.gif&#34; data-caption=&#34;Responsive design&#34;&gt;


  &lt;img data-src=&#34;https://jameyimpact.github.io/post/ebay/ebay81_hue2187b0be88d65848ae9dab775f1b965_21198712_2000x2000_fit_lanczos.gif&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1888&#34; height=&#34;972&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Responsive design
  &lt;/figcaption&gt;


&lt;/figure&gt;






  
  











&lt;figure id=&#34;figure-responsive-design&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://jameyimpact.github.io/post/ebay/ebay82_hu57cb43683cd4acd73a7e91db4e9ce054_17327896_2000x2000_fit_lanczos.gif&#34; data-caption=&#34;Responsive design&#34;&gt;


  &lt;img data-src=&#34;https://jameyimpact.github.io/post/ebay/ebay82_hu57cb43683cd4acd73a7e91db4e9ce054_17327896_2000x2000_fit_lanczos.gif&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1888&#34; height=&#34;972&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Responsive design
  &lt;/figcaption&gt;


&lt;/figure&gt;
 --&gt;
&lt;p&gt;Finally, I implement all functions of the web app to a mobile app, which allows users to search through the eBay items catalog and look at the detailed information about them. The App contains 5 screens: Initial Form, Item Catalog, Product Information screen, Seller Information screen and Shipping Information screen. The app has been designed and implemented in a Pixel 2XL emulator by using SDK API 29. Technically, I&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Develop the android app on AndroidStudio using Java.&lt;/li&gt;
&lt;li&gt;Design user friendly layouts featured Splash Screen, Navigation Bars, CardView, ViewPager and so on.&lt;/li&gt;
&lt;li&gt;Implement asynchronous functions including image loading and AJAX calls.&lt;/li&gt;
&lt;li&gt;Call eBay api on the frontend to provide related images on Internet for each product.&lt;/li&gt;
&lt;li&gt;Use Node.js on server side, which is deployed on Google Cloud Platform App Engine.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;ebay9.gif&#34; alt=&#34;Mobile app&#34; title=&#34;Mobile app&#34;&gt;&lt;/p&gt;
&lt;!-- ![space-1.jpg](ebay9.gif) 















&lt;figure id=&#34;figure-steve-francia&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;&#34; data-caption=&#34;Steve Francia&#34;&gt;


  &lt;img src=&#34;&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Steve Francia
  &lt;/figcaption&gt;


&lt;/figure&gt;
 --&gt;
&lt;!-- 




  
  











&lt;figure id=&#34;figure-mobile-app&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://jameyimpact.github.io/post/ebay/ebay9_hu350df382daa204f0de350ee68cc97f4c_17566585_2000x2000_fit_lanczos.gif&#34; data-caption=&#34;Mobile app&#34;&gt;


  &lt;img data-src=&#34;https://jameyimpact.github.io/post/ebay/ebay9_hu350df382daa204f0de350ee68cc97f4c_17566585_2000x2000_fit_lanczos.gif&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1888&#34; height=&#34;972&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Mobile app
  &lt;/figcaption&gt;


&lt;/figure&gt;
 --&gt;
&lt;!-- ![coloring2](/content/post/aaa.gif)
![coloring2](/img/post/aaa.gif) --&gt;
</description>
    </item>
    
  </channel>
</rss>
